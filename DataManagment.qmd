---
title: "Nanopore Computational Tutorial"
author: "Diego Lera-Lozano and Vivian Yifan Li"
format:
  html:
    theme: darkly
    toc: true
    toc-float: true
    toc-depth: 5
    df-print: paged
    smooth-scroll: true
    citations-hover: true
editor: source  
---

# Intro

In this tutorial we hope to provide the Medina Lab a clear and concise guide on how to proceed with your freshly generated Oxford Nanopore data! In the guide we will cover the following:

-   Accessing you data and managing it
-   In house basecalling
-   Read quality control methods
-   Future steps and additional Resources

If at any point you run into unique issues and/or have any feedback regarding the tutorial feel free to reach out to either author.

# Data Managment

To connect to the MinION from the command terminal: `ssh minit@<ipaddress>`

-   Medina minION IP address: 172.27.173.47
-   Password: minit

To access your data navigate to the hidden data folder: `cd /data`

Once you find your data you can begin to transfer your data off the MinION into Cassiopea (online backup):

1.  Compress the data folder into .tar.gz

-   `tar -czvf <folder_to_compress>.tar.gz <folder_to_compress>`
-   May take a couple hours depending on size of the folder

2.  Create an md5 hash of the source zip file

-   `md5sum <source_folder.tar.gz> > <source_folder.md5>`
-   May take an hour depending on size of the tarzip file

3.  Copy to Cassiopea

-   Connect to Cassiopea from browser (in bookmarks)
-   `scp -r minit@<ipaddress>:path_to_source /Volumes/MedinaLab/path_to_destination`
-   `rsync -avz minit@<ipaddress>:path_to_source /Volumes/MedinaLab/path_to_destination`

4.  Create md5 hash of the destination zip file

-   Make sure it is exactly the same as the one at the source

5.  Transfer data off the MinION into a hard drive (physical backup). Perform md5 checksum.

6.  Transfer data(pod5 pass files) to Roar Collab or other working directory. Perform md5 checksum.

# Basecalling

At this point in the tutorial we assume that you have downloaded your pod5 pass files into a working directory in either Roar Collab or a lab server. At this point it is important to note why we do the basecalling ourselves rather then using the basecalled reads provided by the MinION. The reads provided by the MinION itself were basecalled using ONT's software Guppy. What we found when checking the quality of these reads is that Guppy did a poor to mediocre job of accurately calling each base due to this we decided to use a different basecalling software being ONT's Dorado. What we found was that the high accuracy model of Dorado produced amazingly high quality reads. Due to this we decided to proceed with Dorado.

### Installation

1.  Install Dorado

-   Navigate to: https://github.com/nanoporetech/dorado/
-   Find the latest linux 64 installation: dorado-X.X.X-linux-x64
-   Copy link address then run the following in your programs folder: `wget copied/link/address/dorado-X.X.X-linux-x64.tar.gz`

2.  Model Installation

-   First decide on the the accuracy level of the model: fast, hac, sup(most accurate, takes the longest, highly recommended!)
-   Second determine you Chemistry type and Pore type which can both be found in your run log file produced by the MinION
-   Once determined find the respective model from the DNA model list on the github then download, for example: `path/to/dorado --model dna_r10.4.1_e8.2_400bps_sup@v4.3.0`

### Basecalling for demultiplexed reads

For pod5 files that are already demultiplexed into separate barcode folders:

1.  Initial Script

-   To begin I built the initial script `basecalling_barcode01_0.sh` that will be used for the base calling:

```         
#!/bin/bash
#SBATCH --job-name=B1R_0
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=24
#SBATCH --time=24:00:00
#SBATCH --mem=250G

date

#Variables
export MODEL=dna_r10.4.1_e8.2_400bps_sup@v4.2.0
export INDIR=barcode02/FAW85005_pass_barcode02_63d61123_4536b951_0.pod5
export OUT=barcode01_reads_0.fastq.gz

#Commands 
dorado duplex -t $SLURM_NTASKS -x "cpu" --emit-fastq $MODEL $INDIR | gzip > $OUT

date
```

-   -t flag represents the amount of threads we are using
-   -x flag tells dorado to use cpus as we don’t have access to gpus on roar
-   –emit-fastq tells dorado to produce fastq files
-   gzip \> gzips our files

2.  Job Submission!

-   Due to several issues while attempting to create a job array, we settled on running several loops which submit each read file individually for basecalling:

```         
for i in {0..99}; do echo $i; done
for i in {0..99}; do cp basecalling_barcode01_0.sh basecalling_barcode01_${i}.sh; done
for i in {0..99}; do sed -i "s/_0/_${i}/g" basecalling_barcode01_${i}.sh; done
for i in {0..99}; do sbatch basecalling_barcode01_${i}.sh; done
```

-   First the bounds of the loop should match the amount of the pod5 pass files you contain in a directory.
-   The first for loop is a simple check to see if the loop is working.
-   The second copies the original script until there is one script per pod5 files.
-   The third substitutes each \_0 in a script with the number currently iterating in the loop
-   The final loop submits all jobs for the barcode.

### Basecalling with demultiplexing for reads that are not already demultiplexd

For pod5 files that were not already demultiplexed in the machine - ie. all pod5 are found in one single folder:

##### Below is the workflow overview for basecalling individual pod5 files that have not already been demultiplexed in the sequencer.

1.  Run your dataset through simplex basecalling with barcoding enabled: dorado basecaller <model> <pod5> --kit-name <barcode-kit> \> calls.bam

2.  Demultiplex the basecalled bam file: dorado demux --no-classify --output-dir classify and split the dataset

3.  Then fetch the read ids per barcode from the corresponding .bam and put it in a read.txt file, eg. for barcode01: samtools view SQK-NBD114-24_barcode01.bam \| cut -f1 \| sort \| uniq \> BC01_read_names.txt

4.  Run dorado duplex <model> <pod5> --read-ids BC01_read_names.txt and this will run duplex basecalling only with the read ids from that barcode

##### STEP 1: SIMPLEX BASECALLING & BARCODING

```         
#!/bin/bash
#SBATCH --job-name=R_0
#SBATCH --output=R_0.out
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=16
#SBATCH --time=24:00:00
#SBATCH --mem=133G

# Print starting date and time.
date

# Change directory to the folder that contains all the pod5 files for one barcode.
cd /storage/home/yvl6147/scratch/Symb_microbiomes_all_run1/run1/20240525_1755_MC-114792_FAZ02813_b40c16cf/pod5

# Create a folder for the output fastq files to go into.
mkdir /storage/home/yvl6147/scratch/Symb_microbiomes_all_run1/dorado_seqs/

# Define variables.
export MODEL=/storage/home/yvl6147/scratch/dna_r10.4.1_e8.2_400bps_sup@v4.3.0 # define super accurate basecalling model for dorado
# Alternatively, MODEL=path_to_downloaded_basecalling_model
export OUT=/storage/home/yvl6147/scratch/Symb_microbiomes_all_run1/dorado_seqs/FAZ02813_b40c16cf_67e5b7b8_0.bam # specify output directory
export IN=/storage/home/yvl6147/scratch/Symb_microbiomes_all_run1/run1/20240525_1755_MC-114792_FAZ02813_b40c16cf/pod5/FAZ02813_b40c16cf_67e5b7b8_0.pod5 # specify input directory

# Run basecalling with barcoding for the single pod5 file. Change kit name accordingly using the --kit-name tag - this should be the barcoding kit used to prepare your library.
echo $IN # sanity check to make sure the correct pod5 file is being run.
/storage/home/yvl6147/scratch/dorado-0.5.3-linux-x64/bin/dorado basecaller -x "cpu" $MODEL $IN --kit-name SQK-NBD114-24 > $OUT
echo $OUT # sanity check to make sure the correct bam file is being outputted.

# Print completion date and time.
date
```

We need to run the above script for each pod5 file. So we have to copy the script, edit each script, and run each script. To do automate this I ran the following code:

```         
## Eg. To run this for the firt 100 pod5 files,
for i in {0..99}; do echo $i; cp basecalling.sh basecalling_${i}.sh; sed -i "s/_0/_${i}/g" basecalling_${i}.sh; sbatch basecalling_${i}.sh; done
```

-   Line 1: Checks that for loop is iterating 0 - 99 times, this should coincide with the number of pod5files you have. For barcode02 I had 100 files.

-   Line 2: This loop will copy the script you made with a new name.

-   Line 3: This loop will go into each script and change all instances of "*0" to "*\${i}" so each script runs its coinciding pod5 file.

-   Line 4: submits each job

##### STEP 2 & 3: DEMULTIPLEXING ALL BARCODES

```         
## Merge all basecalled BAM files into single BAM file.
samtools merge finalBamFile.bam *.bam

## Make directory to store demuxed BAM files.
mkdir demux

## Demultiplex
dorado demux --output-dir demux --no-classify finalBamFile.bam

## Inside the demuxed folder, fetch the read ids per barcode from the corresponding .bam and put it in a read.txt file.
for i in *.bam;
do
  samtools view $i | cut -f1 | sort | uniq > ${i%.bam}'_read_names.txt';
done
```

##### STEP 4: RUN DUPLEX BASECALLING ON READ IDS PER BARCODE

Script to run for basecalling all barcode01 sequences:
```
# Print starting date and time.
date

# Change directory to the folder that contains all the pod5 files before demux.
cd ~/Symb_microbiomes_all_run1/run1/20240525_1755_MC-114792_FAZ02813_b40c16cf/pod5

# Create a folder for the output fastq files to go into.
mkdir ~/Symb_microbiomes_all_run1/dorado_fastq_demuxed

# Create a folder for BC01 fastq files to go into.
mkdir ~/Symb_microbiomes_all_run1/dorado_fastq_demuxed/barcode01

# Define variables.
export MODEL=~/dna_r10.4.1_e8.2_400bps_sup@v4.3.0 # define super accurate basecalling model for dorado
# Alternatively, MODEL=path_to_downloaded_basecalling_model
export OUT=~/Symb_microbiomes_all_run1/dorado_fastq_demuxed/barcode01/FAZ02813_b40c16cf_67e5b7b8_0.fastq # specify output directory
export IN=~/Symb_microbiomes_all_run1/run1/20240525_1755_MC-114792_FAZ02813_b40c16cf/pod5/FAZ02813_b40c16cf_67e5b7b8_0.pod5 # specify input directory
export READLIST=~/Symb_microbiomes_all_run1/dorado_seqs/demux/SQK-NBD114-24_barcode01_read_names.txt # Specify where to find the list of all read names with barcode01.

# Run duplex basecalling for only the sequences with the same barcode.
echo $IN # sanity check to make sure the correct pod5 file is being run.
~/dorado-0.5.3-linux-x64/bin/dorado duplex $MODEL $IN --read-ids $READLIST > $OUT
echo $OUT # sanity check to make sure the correct bam file is being outputted.

# Print completion date and time.
date
```

Run the script for all pod5 files. This is only for reads with barcode01.
```
for i in {0..1665}; do echo $i; cp duplex_basecalling_BC01.sh duplex_basecalling_BC01_${i}.sh; sed -i "s/_0/_${i}/g" duplex_basecalling_BC01_${i}.sh; bash duplex_basecalling_BC01_${i}.sh; done
```

(This part needs to be automated in future) To repeat the above for barcode02, run:
```
cp duplex_basecalling_BC01.sh duplex_basecalling_BC02.sh
nano duplex_basecalling_BC02.sh # Edit the script to change all barcode01 directories/files to barcode02.
for i in {0..1665}; do echo $i; cp duplex_basecalling_BC02.sh duplex_basecalling_BC02_${i}.sh; sed -i "s/_0/_${i}/g" duplex_basecalling_BC02_${i}.sh; bash duplex_basecalling_BC02_${i}.sh; done
```